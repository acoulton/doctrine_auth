<?php

/**
 * Model_Base_Auth_UserToken
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $user_id
 * @property string $user_agent
 * @property string $token
 * @property integer $created
 * @property integer $expires
 * @property enum $type
 * @property Model_Auth_User $User
 *
 * @package    StaffAdmin
 * @subpackage Models
 * @author     Andrew Coulton <andrew@edbookfest.co.uk>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class AndrewC_Model_Auth_UserToken extends KoDoctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('auth__user_token');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_agent', 'string', 40, array(
             'type' => 'string',
             'length' => '40',
             ));
        $this->hasColumn('token', 'string', 32, array(
             'type' => 'string',
             'length' => '32',
             ));
        $this->hasColumn('created', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('expires', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' =>
             array(
              0 => 'autologin',
              1 => 'activate',
              2 => 'reset',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Model_Auth_User as User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        if (mt_rand(1, 100) === 1) {
            // Do garbage collection
            $query = Doctrine_Query::create()
                        ->delete('Model_Auth_UserToken')
                        ->where('expires < ?', time())
                        ->execute();
        }
    }

    public function preSave($event) {
        // Set hash of the user agent
        $this->user_agent = sha1(Request::$user_agent);

        // Create a new token each time the token is saved
        $this->token = $this->create_token();
    }

    /**
     * Finds a new unique token, using a loop to make sure that the token does
     * not already exist in the database. This could potentially become an
     * infinite loop, but the chances of that happening are very unlikely.
     *
     * @return  string
     */
    public function create_token() {
        while (TRUE) {
            // Create a random token
            $token = text::random('alnum', 32);

            // Make sure the token does not already exist
            /* @var $tokenTable Model_Auth_UserTokenTable */
            $query = Doctrine_Query::create()
                        ->from('Model_Auth_UserToken')
                        ->where('token = ?');

            if ( ! $query->fetchOne($token)) {
                // A unique token has been found
                return $token;
            }
        }
    }

    /**
     * Returns the token with a given string
     * @param string $tokenString
     * @return Model_Auth_UserToken
     */
    public static function fetchTokenFromString($tokenString) {
        $token = Doctrine_Query::create()
                ->from('Model_User_Token ut')
                ->innerJoin('ut.User')
                ->where('ut.token = ?', $tokenString)
                ->fetchOne();

        if ($token && $token->expires < time()) {
            $token->delete();
            $token = false;
        }

        return $token;
    }


}